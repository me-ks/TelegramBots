import telebot
import requests
import re
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = '...'  
bot = telebot.TeleBot(TOKEN)


def get_usdt_uah():
    url = "https://api.binance.com/api/v3/ticker/price?symbol=USDTUAH"
    response = requests.get(url)
    if response.status_code == 200:
        return float(response.json()['price'])
    return None


def main_menu():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('üìà –ê–∫—Ç—É–∞–ª—å–Ω–∏–π –∫—É—Ä—Å', callback_data='get_rate'))
    markup.add(InlineKeyboardButton('‚ûï –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ —á–∞—Ç', url=f"https://t.me/{bot.get_me().username}?startgroup=true"))
    markup.add(InlineKeyboardButton('üí± –û–±–º—ñ–Ω', callback_data='exchange'))
    return markup


def back_markup():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back'))
    return markup


def exchange_markup():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('üí± –û–±–º—ñ–Ω', url='https://t.me/...'))  
    markup.add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back'))
    return markup


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –∫—É—Ä—Å USDT/UAH", reply_markup=main_menu())


@bot.message_handler(commands=['–∫—É—Ä—Å'])
@bot.message_handler(func=lambda message: message.text.lower() in ["—è–∫–∏–π –∫—É—Ä—Å?", "–∫—É—Ä—Å?", "–∫—É—Ä—Å"])
def send_exchange_rate(message):
    chat_id = message.chat.id
    rate = get_usdt_uah()
    
    if rate:
        text = f"üîπ –ê–∫—Ç—É–∞–ª—å–Ω–∏–π –∫—É—Ä—Å USDT: {rate} UAH"
    else:
        text = "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å."

    bot.send_message(chat_id, text)


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == 'get_rate':  
        rate = get_usdt_uah()
        if rate:
            text = f"üîπ –ê–∫—Ç—É–∞–ª—å–Ω–∏–π –∫—É—Ä—Å USDT: {rate} UAH"
        else:
            text = "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å."
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=back_markup())

    elif call.data == 'exchange':  
        text = "üí± –ú–∏ –º–æ–∂–µ–º–æ —à–≤–∏–¥–∫–æ –æ–±–º—ñ–Ω—è—Ç–∏ –≤–∞—à—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.\n\n–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–º –∑ —á—ñ—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª—å–æ–≤–∞–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º –æ–±–º—ñ–Ω—É.\n\n–ü—Ä–∏–∫–ª–∞–¥: —Ç—Ä–µ–±–∞ –æ–±–º—ñ–Ω—è—Ç–∏ 500 USDT"
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=exchange_markup())

    elif call.data == 'back':  
        bot.edit_message_text("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –∫—É—Ä—Å USDT/UAH", 
                              call.message.chat.id, call.message.message_id, reply_markup=main_menu())


@bot.message_handler(func=lambda message: bool(re.match(r'^\d+(\.\d+)?\s?(usdt|–≥—Ä–Ω)$', message.text.lower())))
def convert_currency(message):
    text = message.text.lower()
    rate = get_usdt_uah()
    
    if not rate:
        bot.reply_to(message, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    
    amount_match = re.match(r'^(\d+(\.\d+)?)\s?(usdt|–≥—Ä–Ω)$', text)
    amount = float(amount_match.group(1)) 
    currency_type = amount_match.group(3) 

    if currency_type == "usdt":
        total_uah = round(amount * rate, 2)  
        bot.reply_to(message, f"üí± {amount} USDT ‚âà {total_uah} UAH –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–º –∫—É—Ä—Å–æ–º {rate} UAH/USDT")
    else:
        total_usdt = round(amount / rate, 2)  
        bot.reply_to(message, f"üí± {amount} UAH ‚âà {total_usdt} USDT –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–º –∫—É—Ä—Å–æ–º {rate} UAH/USDT")


bot.polling(none_stop=True)
